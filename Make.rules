ARCH = $(shell uname -m | sed 's/i.86/ia32/;s/arm.*/arm/')
ifeq ($(ARCH),ia32)
  ARCH3264 = -m32 -D__i386__
else ifeq ($(ARCH),x86_64)
  ARCH3264 = -D__x86_64__
else
  $(error unsupported architecture $(ARCH))
endif

GNUEFI_DIR      = $(TOPDIR)/gnu-efi
GNUEFI_LIBS     = lib
GNUEFI_INC      = $(GNUEFI_DIR)/inc
GNUEFI_LIBDIR   = $(GNUEFI_DIR)/$(ARCH)/lib
GNUEFI_LIB      = $(GNUEFI_LIBDIR)/libefi.a

INCDIR := -I$(TOPDIR)
INCDIR += -I$(TOPDIR)include/
INCDIR += -I$(GNUEFI_INC)
INCDIR += -I$(GNUEFI_INC)/$(ARCH)
INCDIR += -I$(GNUEFI_INC)/protocol

CFLAGS = -Os -g $(ARCH3264) -fpic -Werror -fshort-wchar -fno-stack-protector -ffreestanding -fno-stack-check

CRT_DIR = $(GNUEFI_DIR)/$(ARCH)/gnuefi
CRTOBJS = $(CRT_DIR)/crt0-efi-$(ARCH).o
LDSCRIPT = $(GNUEFI_DIR)/gnuefi/elf_$(ARCH)_efi.lds

LDFLAGS := -nostdlib -shared -Bsymbolic
LDFLAGS += -L$(GNUEFI_LIBDIR) -L$(CRT_DIR) $(CRTOBJS)

LOADLIBES := -lefi -lgnuefi
LOADLIBES += $(shell $(CC) $(ARCH3264) -print-libgcc-file-name)
LOADLIBES += -T $(LDSCRIPT)

FORMAT = --target=efi-rtdrv-$(ARCH)
OBJCOPY = objcopy

ifneq ($(DEBUG),)
CFLAGS += -DDEBUG_LEVEL=$(DEBUG)
endif

# globally use EFI calling conventions (requires gcc >= 4.7)
CFLAGS += -DGNU_EFI_USE_MS_ABI

ifeq ($(ARCH),x86_64)
  CFLAGS += -DEFI_FUNCTION_WRAPPER -mno-red-zone -maccumulate-outgoing-args
endif

ifeq ($(ARCH),ia32)
  CFLAGS += -mno-red-zone
endif

%.efi: %.so
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic -j .dynsym \
		   -j .rel -j .rela -j .rel.* -j .rela.* -j .rel* -j .rela* \
		   -j .reloc $(FORMAT) $*.so $@
%.so: %.o
	$(LD) $(LDFLAGS) $^ -o $@ $(LOADLIBES)
	# check we have no undefined symbols
	nm -D $@ | grep ' U ' && exit 1 || exit 0

%.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.efi.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.efi.s: %.c
	$(CC) -S $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.a:
	ar rcv $@ $^
