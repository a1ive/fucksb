ARCH = $(shell uname -m | sed 's/i.86/ia32/;s/arm.*/arm/')
ifeq ($(ARCH),ia32)
  ARCH3264 = -m32 -D__i386__
else ifeq ($(ARCH),x86_64)
  ARCH3264 = -D__x86_64__
else ifeq ($(ARCH),aarch64)
  ARCH3264 = -D__aarch64__
else ifeq ($(ARCH),arm)
  ARCH3264 = -D__arm__
else
  $(error unknown architecture $(ARCH))
endif

INCDIR := -I$(TOPDIR)
INCDIR += -I$(TOPDIR)include/
INCDIR += -I/usr/include/efi
INCDIR += -I/usr/include/efi/$(ARCH)
INCDIR += -I/usr/include/efi/protocol

CFLAGS = -Os -g $(ARCH3264) -fpic -Werror -fshort-wchar -fno-stack-protector -ffreestanding -fno-stack-check
CRTOBJ = crt0-efi-$(ARCH).o
CRTPATHS = /lib /lib64 /lib/efi /lib64/efi /usr/lib /usr/lib64 /usr/lib32 /usr/lib/efi /usr/lib64/efi /usr/lib/gnuefi /usr/lib64/gnuefi
CRTPATH = $(shell for f in $(CRTPATHS); do if [ -e $$f/$(CRTOBJ) ]; then echo $$f; break; fi; done)
CRTOBJS = $(CRTPATH)/$(CRTOBJ)
# there's a bug in the gnu tools ... the .reloc section has to be
# aligned otherwise the file alignment gets screwed up
LDSCRIPT = elf_$(ARCH)_efi.lds
LDFLAGS := -nostdlib
LDFLAGS += -shared -Bsymbolic $(CRTOBJS) -L $(CRTPATH) -L /usr/lib -L /usr/lib64 -L /usr/lib32 -T $(LDSCRIPT)
LOADLIBES = -lefi -lgnuefi $(shell $(CC) $(ARCH3264) -print-libgcc-file-name)
FORMAT = --target=efi-rtdrv-$(ARCH)
OBJCOPY = objcopy

ifneq ($(DEBUG),)
CFLAGS += -DDEBUG_LEVEL=$(DEBUG)
endif

# globally use EFI calling conventions (requires gcc >= 4.7)
CFLAGS += -DGNU_EFI_USE_MS_ABI

ifeq ($(ARCH),x86_64)
  CFLAGS += -DEFI_FUNCTION_WRAPPER -mno-red-zone
endif

ifeq ($(ARCH),ia32)
  CFLAGS += -mno-red-zone
endif

ifeq ($(ARCH),arm)
  LDFLAGS += --defsym=EFI_SUBSYSTEM=0x0a
endif

ifeq ($(ARCH),aarch64)
  LDFLAGS += --defsym=EFI_SUBSYSTEM=0x0a
endif

%.efi: %.so
	$(OBJCOPY) -j .text -j .sdata -j .data -j .dynamic -j .dynsym \
		   -j .rel -j .rela -j .rel.* -j .rela.* -j .rel* -j .rela* \
		   -j .reloc $(FORMAT) $*.so $@
%.so: %.o
	$(LD) $(LDFLAGS) $^ -o $@ $(LOADLIBES)
	# check we have no undefined symbols
	nm -D $@ | grep ' U ' && exit 1 || exit 0

%.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.efi.o: %.c
	$(CC) $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.efi.s: %.c
	$(CC) -S $(INCDIR) $(CFLAGS) $(CPPFLAGS) -fno-toplevel-reorder -DBUILD_EFI -c $< -o $@

%.a:
	ar rcv $@ $^
